@page "/accountManage"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BankApp.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BankApp.Data
@using BankApp.Models
@using Microsoft.EntityFrameworkCore

@inject BankService bankService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider



<div class="AccountPage">
    <div class="AccountHeader"></div>
    <h1>Accounts</h1>
    <div class="AccountBody">

        <EditForm Model="account" OnValidSubmit="AddAccount">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">AccountName</span>
                </div>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="inputGroupSelect01">AccountType</label>
                </div>

                <select class="custom-select" @bind="SelectedAccountType">
                    <option disabled selected>Choose...</option>
                    @foreach (var accountType in Enum.GetValues(typeof(AccountTypes)))
                    {
                        <option value="@accountType">@accountType</option>
                    }
                </select>
            </div>

            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Balance</span>
                </div>
                <input type="text" class="form-control" aria-label="Balance" aria-describedby="inputGroup-sizing-sm">
            </div>
            <button type="submit">Add</button>
        </EditForm>




@if (accounts.Count == 0)
{
    <p>You have no accounts yet.</p>
}

else
{
    <table class="table table-light table-striped">
        <thead>
            <tr>
                <th>Account Name</th>
                <th>Account Number</th>
                <th>Balance</th>
                <th>Type</th>
                <th>Status</th>
                <th>Delete</th>
                <th>Transfer</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var account in accounts) 
            {
                <tr>
                    <td>@account.Name</td>
                    <td>@account.AccountNumber</td>
                    <td>@account.Balance</td>
                    <td>@account.AccountType</td>

                    <td>@(account.IsActive ? "Active" : "Inactive")</td>

                    <td>
                        <button type="button" @onclick="() => DeleteAccount(account.Id)" class="btn btn-danger">delete</button>
                    </td>
                    <td>
                        transferbtn
                    </td>
                </tr>
            }
        </tbody>
    </table>
    }

    </div> 



    <div class="AccountFooter"></div>
</div>


@code{
    private List<Account> accounts = new();
    private Account account = new Account();

    private AccountTypes SelectedAccountType { get; set; }


    protected override async Task OnInitializedAsync(){
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await userManager.GetUserAsync(authState.User);
        accounts = await bankService.GetAccountsByUserAsync(user);
        
        await bankService.CreateMainAccountAsync(user);
    }

    public async Task AddAccount(){

    }

    private async Task DeleteAccount(int accountId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await userManager.GetUserAsync(authState.User);

        if (user == null)
        {
            return;
        }

        //getting deletemethod from service
        await bankService.DeleteAccountAsync(user, accountId);

        accounts = await bankService.GetAccountsByUserAsync(user);

    }
    

    
}
