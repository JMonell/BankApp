@page "/auth"

@using BankApp.Data
@using Microsoft.AspNetCore.Authorization
@using BankApp.Models
@using BankApp
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Roles = "Admin")]
@* @attribute [Authorize] *@

<PageTitle>Auth</PageTitle>

<h1>You are authenticated</h1>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>

<AuthorizeView Roles = "Admin">
    Hello @context.User.Identity?.Name! You are an Admin
        <div class="table-responsive" style="margin-top: 5%;">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Address</th>
                        <th>Social Security Number</th>
                        <th>Role</th>
                    </tr>
                </thead>   
                <tbody>
                    @foreach(var u in users ){
                        <tr>
                            <td>@u.FirstName @u.LastName</td>
                            <td>@u.Email</td>
                            <td>@u.PhoneNumber</td>
                            <td>@u.Address</td>
                            <td>@u.SocialSecurityNumber</td>
                            <td>
                                @{
                                    string joinRoles = string.Join(",", userRoles[u.Id]);
                                    if(userRoles[u.Id].Contains("Admin"))
                                    {
                                        <p>Admin</p>
                                    }
                                    else{
                                        <p>User</p>
                                    }
                                }
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary">edit</button>
                                <button type="button" @onclick="() => DeleteUser(u.Id)" class="btn btn-danger">delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>         
</AuthorizeView>

@code{
    private List<ApplicationUser> users;
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();

    protected override async Task OnInitializedAsync()
    {
        users = userManager.Users.ToList();

        foreach (var user in users){
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
        }
        @* var auth = await authenticationStateProvider.GetAuthenticationStateAsync(); *@
    }

    private async Task DeleteUser(string userId)
    {
        var user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {
            await userManager.DeleteAsync(user);
            users = userManager.Users.ToList(); // Refresh user list
        }
    }
}