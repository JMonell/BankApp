@page "/auth"

@using BankApp.Data
@using Microsoft.AspNetCore.Authorization
@using BankApp.Models
@using BankApp
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Roles = "Admin")]
@* @attribute [Authorize] *@

<PageTitle>Auth</PageTitle>

<h1>You are authenticated</h1>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>

<AuthorizeView Roles = "Admin">
    Hello @context.User.Identity?.Name! You are an Admin
        <div class="table-responsive" style="margin-top: 5%;">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Address</th>
                        <th>Social Security Number</th>
                        <th>Role</th>
                    </tr>
                </thead>   
                <tbody>
                    @foreach(var u in users ){
                        <tr>
                            <td>@u.FirstName @u.LastName</td>
                            <td>@u.Email</td>
                            <td>@u.PhoneNumber</td>
                            <td>@u.Address</td>
                            <td>@u.SocialSecurityNumber</td>
                            <td>
                                @{
                                    string joinRoles = string.Join(",", userRoles[u.Id]);
                                    if(userRoles[u.Id].Contains("Admin"))
                                    {
                                        <p>Admin</p>
                                    }
                                    else{
                                        <p>User</p>
                                    }
                                }
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-primary dropdown-toggle" @onclick="()=> SelectUser(u.Id)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        edit
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-right">
                                        <button class="dropdown-item" @onclick="() => MakeAdmin()" type="button">Admin</button>
                                        <button class="dropdown-item" @onclick="() => MakeUser()" type="button">User</button>
                                    </div>
                                </div>
                                <button type="button" @onclick="() => DeleteUser(u.Id)" class="btn btn-danger">delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>         
</AuthorizeView>

@code{
    private List<ApplicationUser> users;
    private ApplicationUser SelectedUser;
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();

    private string Admin = "Admin";
    private string User = "User";

    protected override async Task OnInitializedAsync(){
        await ShowUsers();
    }
    private async Task ShowUsers()
    {
        users = userManager.Users.ToList();

        foreach (var user in users){
            userRoles[user.Id] = (await userManager.GetRolesAsync(user)).ToList();
        }
        @* var auth = await authenticationStateProvider.GetAuthenticationStateAsync(); *@
    }

    private async Task SelectUser(string userId){
        SelectedUser = await userManager.FindByIdAsync(userId);
    }

    private async Task MakeAdmin(){
        await userManager.RemoveFromRoleAsync(SelectedUser, User);
        await userManager.AddToRoleAsync(SelectedUser, Admin);
        await ShowUsers();
    }

    private async Task MakeUser(){
        await userManager.RemoveFromRoleAsync(SelectedUser, Admin);
        await userManager.AddToRoleAsync(SelectedUser, User);
        await ShowUsers();
    }



    private async Task DeleteUser(string userId)
    {
        var user = await userManager.FindByIdAsync(userId);
        if (user != null){
            var roles = await userManager.GetRolesAsync(user); // Get user roles
            if (roles.Contains("User")){
                await userManager.DeleteAsync(user);
                await ShowUsers(); // Refresh user list
            }
            else{
                Console.WriteLine("can not delete Admin");
                await ShowUsers(); // Refresh user list
            }
        }

        
    }
}