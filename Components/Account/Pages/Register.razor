@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BankApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="username" aria-required="true" placeholder="bob" />
                <label for="FirstName">FirstName</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="username" aria-required="true" placeholder="jones" />
                <label for="LastName">LastName</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" autocomplete="SocialSecurityNumber" aria-required="true" placeholder="+4612345678" />
                <label for="PhoneNumber">PhoneNumber</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.SocialSecurityNumber" class="form-control" autocomplete="SocialSecurityNumber" aria-required="true" placeholder="202501011234" />
                <label for="SocialSecurityNumber">SocialSecurityNumber</label>
                <ValidationMessage For="() => Input.SocialSecurityNumber" class="text-danger" />
            </div>

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control" autocomplete="Address" aria-required="true" placeholder="Vägkanten 25" />
                <label for="Address">Address</label>
                <ValidationMessage For="() => Input.Address" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.SocialSecurityNumber = Input.SocialSecurityNumber;
        user.Address = Input.Address;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        @* user.PhoneNumber = Input.PhoneNumber; *@

        if(Input.PhoneNumber is not null){
            user.PhoneNumber = Input.PhoneNumber;

            var existingUser = UserManager.Users
            .Any(u=> u.PhoneNumber != null && u.PhoneNumber == user.PhoneNumber);

            if(existingUser){
                identityErrors = new[]{
                    new IdentityError{Description = "already in use"}
                };
            return;
            }
        }

        if(Input.SocialSecurityNumber is not null){
            user.SocialSecurityNumber = Input.SocialSecurityNumber;

            var existingUser = UserManager.Users
            .Any(u=> u.SocialSecurityNumber != null && u.SocialSecurityNumber == user.SocialSecurityNumber);

            if(existingUser){
                identityErrors = new[]{
                    new IdentityError{Description = "already in use"}
                };
            return;
            }
        }

        @* if(Input.Address is not null){
            user.Address = Input.Address;

            var existingUser = UserManager.Users
            .Any(u=> u.Address != null && u.Address == user.Address);

            if(existingUser){
                identityErrors = new[]{
                    new IdentityError{Description = "already in use"}
                };
            return;
            }
        } *@





        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        await UserManager.AddToRoleAsync(user, "user");

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "The firstname must contain only letters.")]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";
        

        [Required]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "The lastname must contain only letters.")]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";
        
        [Required]
        [StringLength(32, ErrorMessage = "The phone number must be minimum of characters long.", MinimumLength = 10)]   
        [RegularExpression(@"^\+?\d{10,15}$", ErrorMessage = "The phone number must contain only numbers.")]
        [Display(Name = "PhoneNumber")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [StringLength(12, ErrorMessage = "The SocialSecurityNumber must be 12 characters long.", MinimumLength = 12)]   
        [RegularExpression(@"^\d{12}$", ErrorMessage = "The Social Security Number must contain only numbers.")]
        [Display(Name = "SocialSecurityNumber")]
        public string SocialSecurityNumber { get; set; } = "";

        [Required]
        [Display(Name = "Address")]
        public string Address { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
